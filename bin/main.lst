ca65 V2.18 - Ubuntu 2.19-1
Main file   : src/main.asm
Current file: src/main.asm

000000r 1               .segment "HEADER"
000000r 1  4E 45 53 1A    .byte "NES", $1A ; Magic string for iNES format
000004r 1  02             .byte $02        ; Number of 16KB PRG-ROM banks (2 banks = 32KB)
000005r 1  01             .byte $01        ; Number of 8KB CHR-ROM banks (1 bank = 8KB)
000006r 1  40             .byte $40        ; Mapper type (4 for MMC3), mirroring (lower nibble for mapper, upper for mirroring/submapper)
000007r 1  00             .byte $00        ; Mapper type, other flags (upper nibble of mapper is in previous byte)
000008r 1  00 00 00 00    .byte $00, $00, $00, $00, $00, $00, $00, $00 ; Reserved bytes
00000Cr 1  00 00 00 00
000010r 1
000010r 1               ; MMC3 Register Addresses
000010r 1               MMC3_CMD          = $8000
000010r 1               MMC3_BANK_SELECT  = $8001
000010r 1               MMC3_IRQ_LATCH    = $A000
000010r 1               MMC3_IRQ_RELOAD   = $A001
000010r 1               MMC3_IRQ_DISABLE  = $C000
000010r 1               MMC3_IRQ_ENABLE   = $C001
000010r 1
000010r 1               ; PPU Registers - now in graphics.asm
000010r 1               .import PPUCTRL, PPUMASK, PPUSTATUS, OAMADDR, OAMDATA, PPUSCROLL, PPUADDR, PPUDATA, OAMDMA
000010r 1               ; APU Registers - now in sound.asm
000010r 1               .import APU_PULSE1_CTRL, APU_PULSE1_SWEEP, APU_PULSE1_TIMERL, APU_PULSE1_TIMERH
000010r 1               .import APU_SND_CHN_CTRL, APU_FRAME_CNT
000010r 1
000010r 1               ; Imported Subroutines & Data from graphics.asm
000010r 1               .import LoadPalette, LoadSmallNametable, UpdateSprites, UpdateLayerScrolls
000010r 1               .import ppu_ctrl_value_default, ppu_mask_value_default
000010r 1               .import oam_ram_buffer
000010r 1
000010r 1               ; Imported Subroutines & Data from sound.asm
000010r 1               .import InitializeSound, PlaySoundEffect, PlayBeepSound
000010r 1               .import SFX_JUMP_ID, SFX_COIN_ID
000010r 1
000010r 1               ; Target scanline for MMC3 IRQ
000010r 1               SCANLINE_SPLIT1 = 80
000010r 1               SCANLINE_SPLIT2 = 160 ; Target for the second split event
000010r 1
000010r 1               .segment "ZEROPAGE"
000000r 1               ; Graphics ZP vars - now in graphics.asm
000000r 1               .importzp layer1_scroll_x, layer1_scroll_y, layer2_scroll_x, layer2_scroll_y, layer3_scroll_x, layer3_scroll_y
000000r 1               .importzp fine_x_scroll_value
000000r 1               .importzp sprite_eff_scroll_low, sprite_eff_scroll_high, sprite_screen_x, oam_index
000000r 1
000000r 1  xx           irq_split_state: .res 1 ; 0 for first split, 1 for second
000001r 1
000001r 1               ; New 16.16 fixed-point world/main scroll - Stays in main.asm
000001r 1               .global main_scroll_x_low, main_scroll_x_high
000001r 1  xx           main_scroll_x_low:  .res 1
000002r 1  xx           main_scroll_x_high: .res 1
000003r 1
000003r 1               ; Player world coordinates (16.16) - Stays in main.asm
000003r 1               .global player_world_x_low, player_world_x_high, player_world_y_low, player_world_y_high
000003r 1  xx           player_world_x_low: .res 1
000004r 1  xx           player_world_x_high: .res 1
000005r 1  xx           player_world_y_low:   .res 1
000006r 1  xx           player_world_y_high:  .res 1
000007r 1
000007r 1               ; Temporary variables for 16-bit math - Stays in main.asm
000007r 1               .global temp_low, temp_high
000007r 1  xx           temp_low: .res 1
000008r 1  xx           temp_high: .res 1
000009r 1
000009r 1               ; NMI Synchronization - Stays in main.asm
000009r 1  xx           NMICount: .res 1
00000Ar 1  xx           PrevNMICount: .res 1
00000Br 1
00000Br 1               ; Game Logic State - Stays in main.asm
00000Br 1  xx           last_coin_scroll_high: .res 1
00000Cr 1  xx           last_jump_scroll_high: .res 1
00000Dr 1
00000Dr 1               .segment "RODATA"
000000r 1               NUM_FOREGROUND_SPRITES = 2
000000r 1
000000r 1               ; Sprite world X high positions - Stays in main.asm (game specific object placement)
000000r 1               .global sprite0_world_x_high, sprite1_world_x_high
000000r 1  50           sprite0_world_x_high: .byte $50
000001r 1  70           sprite1_world_x_high: .byte $70
000002r 1
000002r 1               .segment "STARTUP"
000000r 1               RESET:
000000r 1  78             SEI          ; Disable interrupts
000001r 1  D8             CLD          ; Disable decimal mode
000002r 1  A2 40          LDX #$40
000004r 1  8E rr rr       STX APU_FRAME_CNT    ; Disable APU frame IRQ (use imported APU_FRAME_CNT)
000007r 1  A2 FF          LDX #$FF
000009r 1  9A             TXS          ; Set up stack
00000Ar 1  E8             INX          ; $00 -> $FF
00000Br 1
00000Br 1  20 rr rr       JSR MMC3_Init ; Initialize MMC3 Mapper
00000Er 1  20 rr rr       JSR LoadPalette        ; Now in graphics.asm
000011r 1  20 rr rr       JSR LoadSmallNametable ; Now in graphics.asm
000014r 1  20 rr rr       JSR InitializeSound    ; Now in sound.asm
000017r 1
000017r 1                 ; Initialize scroll positions and counters
000017r 1  A9 00          LDA #0
000019r 1  85 rr          STA layer1_scroll_y ; Uses imported ZP
00001Br 1  85 rr          STA layer2_scroll_y ; Uses imported ZP
00001Dr 1  85 rr          STA layer3_scroll_y ; Uses imported ZP
00001Fr 1  85 rr          STA main_scroll_x_low
000021r 1  85 rr          STA main_scroll_x_high
000023r 1  85 rr          STA player_world_x_low
000025r 1  85 rr          STA player_world_x_high
000027r 1  85 rr          STA player_world_y_low    ; Init player Y low
000029r 1  A9 78          LDA #120 ; Initial screen Y position for player
00002Br 1  85 rr          STA player_world_y_high   ; Init player Y high
00002Dr 1  85 rr          STA NMICount
00002Fr 1  85 rr          STA PrevNMICount
000031r 1  85 rr          STA fine_x_scroll_value ; Uses imported ZP
000033r 1  A9 FF          LDA #$FF
000035r 1  85 rr          STA last_coin_scroll_high ; Initialize for coin sound trigger
000037r 1  85 rr          STA last_jump_scroll_high ; Initialize for jump sound trigger
000039r 1
000039r 1               VBLANKWAIT1:       ; Wait for vblank to make sure PPU is ready
000039r 1  2C rr rr       BIT PPUSTATUS ; Use imported PPUSTATUS
00003Cr 1  10 FB          BPL VBLANKWAIT1
00003Er 1
00003Er 1               CLRMEM:
00003Er 1  A9 00          LDA #$00
000040r 1  95 00          STA $0000, x
000042r 1  9D 00 01       STA $0100, x
000045r 1  9D rr rr       STA oam_ram_buffer, x ; Clear OAM buffer (uses imported oam_ram_buffer)
000048r 1  9D 00 03       STA $0300, x
00004Br 1  9D 00 04       STA $0400, x
00004Er 1  9D 00 05       STA $0500, x
000051r 1  9D 00 06       STA $0600, x
000054r 1  9D 00 07       STA $0700, x
000057r 1  E8             INX
000058r 1  D0 E4          BNE CLRMEM
00005Ar 1
00005Ar 1               VBLANKWAIT2:      ; Wait for vblank again
00005Ar 1  2C rr rr       BIT PPUSTATUS ; Use imported PPUSTATUS
00005Dr 1  10 FB          BPL VBLANKWAIT2
00005Fr 1
00005Fr 1               ; Palette loading code moved to LoadPalette in graphics.asm
00005Fr 1
00005Fr 1               .segment "CODE" ; Or PRG_SWAP_A as per nes.cfg for main code
000000r 1
000000r 1               MainLoop:
000000r 1                 ; --- Simulate Input: Increment scroll (e.g., holding Right) ---
000000r 1  E6 rr          INC main_scroll_x_low
000002r 1  D0 02          BNE SkipIncHigh
000004r 1  E6 rr          INC main_scroll_x_high
000006r 1               SkipIncHigh:
000006r 1
000006r 1                 ; Copy main_scroll to player_world_x (assuming player movement drives scroll)
000006r 1  A5 rr          LDA main_scroll_x_low
000008r 1  85 rr          STA player_world_x_low
00000Ar 1  A5 rr          LDA main_scroll_x_high
00000Cr 1  85 rr          STA player_world_x_high
00000Er 1
00000Er 1                 ; --- Calculate Per-Layer Scroll Positions ---
00000Er 1  20 rr rr       JSR UpdateLayerScrolls
000011r 1
000011r 1                 ; --- Update Sprite Logic ---
000011r 1  20 rr rr       JSR UpdateSprites
000014r 1
000014r 1                 ; --- Coin Sound Trigger ---
000014r 1  A5 rr          LDA main_scroll_x_high
000016r 1  C9 0A          CMP #10 ; Test with 10
000018r 1  D0 13          BNE SkipCoinSound
00001Ar 1  A5 rr          LDA main_scroll_x_low ; Check low byte too for more precise trigger
00001Cr 1  D0 0F          BNE SkipCoinSound
00001Er 1                   ; Check if already played for this specific high scroll value
00001Er 1  A5 rr            LDA last_coin_scroll_high
000020r 1  C5 rr            CMP main_scroll_x_high
000022r 1  F0 09            BEQ SkipCoinSound ; Already played
000024r 1
000024r 1  A9 01            LDA #1 ; Originally #SFX_COIN_ID
000026r 1  20 rr rr         JSR PlaySoundEffect
000029r 1  A5 rr            LDA main_scroll_x_high
00002Br 1  85 rr            STA last_coin_scroll_high ; Remember this scroll value
00002Dr 1               SkipCoinSound:
00002Dr 1
00002Dr 1                 ; --- Trigger for Jump Sound ---
00002Dr 1  A5 rr          LDA main_scroll_x_high
00002Fr 1  C9 14          CMP #$14 ; Trigger at a different scroll position (decimal 20)
000031r 1  D0 13          BNE SkipJumpSound
000033r 1  A5 rr          LDA main_scroll_x_low ; Check low byte too for more precise trigger
000035r 1  D0 0F          BNE SkipJumpSound
000037r 1                 ; Check if already played for this specific high scroll value
000037r 1  A5 rr          LDA last_jump_scroll_high
000039r 1  C5 rr          CMP main_scroll_x_high
00003Br 1  F0 09          BEQ SkipJumpSound ; Already played
00003Dr 1
00003Dr 1  A9 00          LDA #0 ; Originally #SFX_JUMP_ID
00003Fr 1  20 rr rr       JSR PlaySoundEffect
000042r 1  A5 rr          LDA main_scroll_x_high
000044r 1  85 rr          STA last_jump_scroll_high ; Remember this scroll value
000046r 1               SkipJumpSound:
000046r 1
000046r 1                 ; --- Other game logic would go here (player updates, enemy AI, collisions) ---
000046r 1
000046r 1                 ; --- Wait for VBlank (NMI) ---
000046r 1               WaitForNMI:
000046r 1  A5 rr          LDA NMICount         ; Assuming NMICount is a variable incremented by NMI handler
000048r 1  85 rr          STA PrevNMICount
00004Ar 1               WaitLoop:
00004Ar 1  A5 rr          LDA NMICount
00004Cr 1  C5 rr          CMP PrevNMICount
00004Er 1  F0 FA          BEQ WaitLoop         ; Loop until NMICount changes
000050r 1
000050r 1  4C rr rr       JMP MainLoop
000053r 1
000053r 1               ; All subroutines (UpdateLayerScrolls, PlaySoundEffect, PlayBeepSound, LoadSmallNametable, UpdateSprites)
000053r 1               ; are now moved to graphics.asm or sound.asm and imported.
000053r 1
000053r 1               MMC3_Init:
000053r 1  48             PHA             ; Preserve A
000054r 1
000054r 1                 ; Disable MMC3 IRQs initially
000054r 1  A9 00          LDA #$00        ; Value doesn't matter for disabling
000056r 1  8D 00 C0       STA MMC3_IRQ_DISABLE
000059r 1
000059r 1                 ; Set default PRG banking mode (Mode 0: $8000 swappable, $A000 swappable, $C000 fixed, $E000 fixed)
000059r 1                 ; And default CHR banking mode (Mode 0: two 2KB banks at $0000-$07FF and $0800-$0FFF, four 1KB banks at $1000-$1FFF)
000059r 1  A9 00          LDA #%00000000  ; Bits 7,6 for PRG mode (00 is mode 0). Bits 5-0 for CHR A12 inversion.
00005Br 1  8D 00 80       STA MMC3_CMD
00005Er 1
00005Er 1                 ; Select initial PRG bank 0 for the $8000-$9FFF slot (R6):
00005Er 1  A9 06          LDA #$06        ; Select R6 register (for $8000-$9FFF)
000060r 1  8D 00 80       STA MMC3_CMD
000063r 1  A9 00          LDA #$00        ; Bank 0
000065r 1  8D 01 80       STA MMC3_BANK_SELECT
000068r 1
000068r 1                 ; Select initial PRG bank 1 for the $A000-$BFFF slot (R7):
000068r 1  A9 07          LDA #$07        ; Select R7 register (for $A000-$BFFF)
00006Ar 1  8D 00 80       STA MMC3_CMD
00006Dr 1  A9 01          LDA #$01        ; Bank 1
00006Fr 1  8D 01 80       STA MMC3_BANK_SELECT
000072r 1
000072r 1                 ; Note: The fixed bank at $E000-$FFFF is automatically the last physical bank.
000072r 1                 ; The bank at $C000-$DFFF is automatically the second to last physical bank in this PRG mode.
000072r 1                 ; RESET code (including this routine) should be in the fixed upper bank ($E000-$FFFF).
000072r 1
000072r 1                 ; Initialize IRQ split state
000072r 1  A9 00          LDA #$00
000074r 1  85 rr          STA irq_split_state
000076r 1
000076r 1                 ; --- CHR Banking Setup for MMC3 Mode 0 ---
000076r 1                 ; PPU $0000-$0FFF for BG tiles (from CHR banks 0-3)
000076r 1                 ; PPU $1000-$1FFF for Sprite tiles (from CHR banks 4-7)
000076r 1
000076r 1                 ; Set $8000 CMD register to select CHR regs R0-R5, then $8001 for bank number.
000076r 1                 ; CHR A12 inversion bits in $8000 are 0 for now (normal mapping).
000076r 1
000076r 1                 ; R0: PPU $0000-$07FF (2KB), map to CHR physical bank 0 (which means banks 0 & 1 if 1KB granularity)
000076r 1  A9 00          LDA #%00000000  ; Select R0, PRG Mode 0, CHR A12 Inversion bits all 0
000078r 1  8D 00 80       STA MMC3_CMD
00007Br 1  A9 00          LDA #$00        ; CHR data bank 0 (for the 2KB page starting at $0000)
00007Dr 1  8D 01 80       STA MMC3_BANK_SELECT
000080r 1
000080r 1                 ; R1: PPU $0800-$0FFF (2KB), map to CHR physical bank 2 (banks 2 & 3 if 1KB granularity)
000080r 1  A9 01          LDA #%00000001  ; Select R1
000082r 1  8D 00 80       STA MMC3_CMD
000085r 1  A9 02          LDA #$02        ; CHR data bank 2 (for the 2KB page starting at $0800)
000087r 1  8D 01 80       STA MMC3_BANK_SELECT
00008Ar 1
00008Ar 1                 ; R2: PPU $1000-$13FF (1KB), map to CHR physical bank 4
00008Ar 1  A9 02          LDA #%00000010  ; Select R2
00008Cr 1  8D 00 80       STA MMC3_CMD
00008Fr 1  A9 04          LDA #$04        ; CHR data bank 4
000091r 1  8D 01 80       STA MMC3_BANK_SELECT
000094r 1
000094r 1                 ; R3: PPU $1400-$17FF (1KB), map to CHR physical bank 5
000094r 1  A9 03          LDA #%00000011  ; Select R3
000096r 1  8D 00 80       STA MMC3_CMD
000099r 1  A9 05          LDA #$05        ; CHR data bank 5
00009Br 1  8D 01 80       STA MMC3_BANK_SELECT
00009Er 1
00009Er 1                 ; R4: PPU $1800-$1BFF (1KB), map to CHR physical bank 6
00009Er 1  A9 04          LDA #%00000100  ; Select R4
0000A0r 1  8D 00 80       STA MMC3_CMD
0000A3r 1  A9 06          LDA #$06        ; CHR data bank 6
0000A5r 1  8D 01 80       STA MMC3_BANK_SELECT
0000A8r 1
0000A8r 1                 ; R5: PPU $1C00-$1FFF (1KB), map to CHR physical bank 7
0000A8r 1  A9 05          LDA #%00000101  ; Select R5
0000AAr 1  8D 00 80       STA MMC3_CMD
0000ADr 1  A9 07          LDA #$07        ; CHR data bank 7
0000AFr 1  8D 01 80       STA MMC3_BANK_SELECT
0000B2r 1
0000B2r 1  68             PLA             ; Restore A
0000B3r 1  60             RTS
0000B4r 1
0000B4r 1               NMI:
0000B4r 1  48             PHA             ; Push Accumulator
0000B5r 1  8A             TXA             ; Transfer X to A
0000B6r 1  48             PHA             ; Push X (as A)
0000B7r 1  98             TYA             ; Transfer Y to A
0000B8r 1  48             PHA             ; Push Y (as A)
0000B9r 1
0000B9r 1  AD rr rr       LDA PPUSTATUS   ; Read PPU status to reset address latch and acknowledge NMI
0000BCr 1
0000BCr 1                 ; --- OAM DMA Transfer ---
0000BCr 1  A9 rr          LDA #>oam_ram_buffer ; High byte of OAM buffer RAM address (e.g., $02 for $0200)
0000BEr 1  8D rr rr       STA OAMDMA        ; Writing here initiates DMA transfer from $xx00-$xxFF to OAM
0000C1r 1                 ; Note: DMA takes ~513 CPU cycles. Subsequent code should account for this.
0000C1r 1
0000C1r 1                 ; --- PPU Rendering Setup ---
0000C1r 1  AD rr rr       LDA ppu_mask_value_default
0000C4r 1  8D rr rr       STA PPUMASK
0000C7r 1  AD rr rr       LDA ppu_ctrl_value_default
0000CAr 1  8D rr rr       STA PPUCTRL       ; Initial PPUCTRL write, NMI enabled.
0000CDr 1
0000CDr 1                 ; --- Set Scroll for Layer 1 ---
0000CDr 1  A5 rr          LDA layer1_scroll_x
0000CFr 1  8D rr rr       STA PPUSCROLL     ; Write X scroll
0000D2r 1  A5 rr          LDA layer1_scroll_y
0000D4r 1  8D rr rr       STA PPUSCROLL     ; Write Y scroll
0000D7r 1
0000D7r 1                 ; --- MMC3 IRQ Setup for First Scanline Split ---
0000D7r 1  A9 00          LDA #$00
0000D9r 1  85 rr          STA irq_split_state      ; Reset for current frame's IRQ sequence
0000DBr 1  A9 50          LDA #SCANLINE_SPLIT1 ; Value for the first IRQ (e.g., scanline 80)
0000DDr 1  8D 00 A0       STA MMC3_IRQ_LATCH   ; Write to IRQ Latch register ($A000)
0000E0r 1
0000E0r 1  A9 00          LDA #$00           ; Dummy write, value doesn't matter for reload
0000E2r 1  8D 01 A0       STA MMC3_IRQ_RELOAD  ; Write to IRQ Reload register ($A001) to arm the counter
0000E5r 1
0000E5r 1  A9 00          LDA #$00           ; Dummy write, value doesn't matter for enable
0000E7r 1  8D 01 C0       STA MMC3_IRQ_ENABLE  ; Write to IRQ Enable register ($C001) to enable MMC3 IRQs
0000EAr 1
0000EAr 1                 ; --- Music/Sound Update (Placeholder) ---
0000EAr 1                 ; JSR UpdateMusic
0000EAr 1
0000EAr 1  E6 rr          INC NMICount      ; Increment NMI counter for main loop synchronization
0000ECr 1
0000ECr 1                 ; --- NMI Exit ---
0000ECr 1  68             PLA             ; Pull Y (as A)
0000EDr 1  A8             TAY             ; Transfer A to Y
0000EEr 1  68             PLA             ; Pull X (as A)
0000EFr 1  AA             TAX             ; Transfer A to X
0000F0r 1  68             PLA             ; Pull Accumulator
0000F1r 1  40             RTI             ; Return from Interrupt
0000F2r 1
0000F2r 1               IRQ:
0000F2r 1  48             PHA             ; Push Accumulator
0000F3r 1  8A             TXA             ; Transfer X to A
0000F4r 1  48             PHA             ; Push X (as A)
0000F5r 1  98             TYA             ; Transfer Y to A
0000F6r 1  48             PHA             ; Push Y (as A)
0000F7r 1
0000F7r 1                 ; MMC3 IRQ is cleared by the CPU jump, effectively. Re-arm or disable as needed.
0000F7r 1
0000F7r 1  A5 rr          LDA irq_split_state
0000F9r 1  F0 12          BEQ HandleFirstSplit
0000FBr 1
0000FBr 1               HandleSecondSplit:
0000FBr 1                 ; --- This is the IRQ for the second split (e.g., at scanline 160) ---
0000FBr 1                 ; Set scroll for Layer 3
0000FBr 1  A5 rr          LDA layer3_scroll_x
0000FDr 1  8D rr rr       STA PPUSCROLL
000100r 1  A5 rr          LDA layer3_scroll_y
000102r 1  8D rr rr       STA PPUSCROLL
000105r 1
000105r 1                 ; Disable MMC3 IRQs for the rest of the frame
000105r 1  A9 00          LDA #$00 ; dummy value
000107r 1  8D 00 C0       STA MMC3_IRQ_DISABLE
00010Ar 1
00010Ar 1  4C rr rr       JMP IrqDone
00010Dr 1
00010Dr 1               HandleFirstSplit:
00010Dr 1                 ; --- This is the IRQ for the first split (e.g., at scanline 80) ---
00010Dr 1                 ; Set scroll for Layer 2
00010Dr 1  A5 rr          LDA layer2_scroll_x
00010Fr 1  8D rr rr       STA PPUSCROLL
000112r 1  A5 rr          LDA layer2_scroll_y
000114r 1  8D rr rr       STA PPUSCROLL
000117r 1
000117r 1                 ; Set up MMC3 IRQ for the second split
000117r 1  A9 50          LDA #(SCANLINE_SPLIT2 - SCANLINE_SPLIT1) ; Latch value (scanlines from current to next IRQ)
000119r 1  8D 00 A0       STA MMC3_IRQ_LATCH
00011Cr 1
00011Cr 1  A9 00          LDA #$00 ; dummy value
00011Er 1  8D 01 A0       STA MMC3_IRQ_RELOAD  ; Arm the counter
000121r 1
000121r 1  A9 00          LDA #$00 ; dummy value
000123r 1  8D 01 C0       STA MMC3_IRQ_ENABLE  ; Enable MMC3 IRQs
000126r 1
000126r 1                 ; Update state for next IRQ
000126r 1  E6 rr          INC irq_split_state  ; irq_split_state becomes 1
000128r 1
000128r 1               IrqDone:
000128r 1  68             PLA             ; Pull Y (as A)
000129r 1  A8             TAY             ; Transfer A to Y
00012Ar 1  68             PLA             ; Pull X (as A)
00012Br 1  AA             TAX             ; Transfer A to X
00012Cr 1  68             PLA             ; Pull Accumulator
00012Dr 1  40             RTI             ; Return from Interrupt
00012Er 1
00012Er 1               .segment "CHRDATA"
000000r 1                 .incbin "graphics/tiles.chr" ; Assuming this file is 8KB (8192 bytes)
000000r 1
000000r 1               .segment "VECTORS"
000000r 1  rr rr rr rr    .addr NMI, RESET, IRQ ; Define NMI, RESET, and IRQ vectors
000004r 1  rr rr
000004r 1
